    gzip_comp_level 2;
    gzip_vary on;
    gzip_min_length 500;
    gzip_http_version 1.0;
	gzip_buffers 16 8k;
	gzip_disable msie6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
	gzip_static always;
	gzip_proxied any;
    
	server_tokens off;

	# log_format l2met '#nginx=$request_time request_id=$http_x_request_id';
	# access_log logs/nginx/access.log l2met;
	# error_log logs/nginx/error.log;

	# include mime.types;
	# default_type application/octet-stream;
	# sendfile on;

	#Must read the body in 5 seconds.
	client_body_timeout 5;
    
	# upstream app_server {
    #     server unix:/tmp/nginx.socket fail_timeout=0;
    # }

    
    # Set Proxy Path
    # proxy_cache_path nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";
    
    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

    server {
        listen 8081;

        server_name localhost;
        keepalive_timeout 5;


        root /srv/www/static;
        
        location / {            
            add_header X-Static-Asset true;    
            try_files $uri $uri/ @web;
        }

        location @web {
            # # Cache settings
            # proxy_cache my_cache;
            # proxy_cache_revalidate on;
            # # proxy_cache_min_uses 3;
            # proxy_cache_valid 200 302 1m;
            # proxy_cache_valid 404 1m;
            # proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            # add_header X-Cache-Status $upstream_cache_status;
            # proxy_cache_bypass $cookie_nocache $arg_nocache;


            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            proxy_pass http://web:3000;
        }
        
        
        location /api/v1/todos {
            proxy_pass http://todos:3000;
        }
        
    }
